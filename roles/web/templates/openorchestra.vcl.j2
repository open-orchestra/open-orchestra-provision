# This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
# 
# Default backend definition.  Set this to point to your content
# server.
#

acl purgers {
  "127.0.0.1";
}

acl invalidators {
  "127.0.0.1";
}

{% for apache_main_port in apache_main_ports %}
backend f{{ loop.index }} {
  .host = "127.0.1.1";
  .port = "{{ apache_main_port }}";
}
{% endfor %}

director front round-robin {
{% for apache_main_port in apache_main_ports %}
    {
        .backend = f{{ loop.index }};
    }
{% endfor %}
}

sub vcl_recv {
    set req.backend = front;

    if (req.http.Cache-Control ~ "no-cache" && client.ip ~ invalidators) {
        set req.hash_always_miss = true;
    }

    if (req.request == "BAN") {
        if (!client.ip ~ invalidators) {
             error 405 "Ban not allowed";
        }

        if (req.http.X-Cache-Tags) {
            ban("obj.http.X-Host ~ " + req.http.X-Host
                + " && obj.http.X-Url ~ " + req.http.X-Url
                + " && obj.http.content-type ~ " + req.http.X-Content-Type
                + " && obj.http.X-Cache-Tags ~ " + req.http.X-Cache-Tags
            );
        } else {
          ban("obj.http.X-Host ~ " + req.http.X-Host
              + " && obj.http.X-Url ~ " + req.http.X-Url
              + " && obj.http.content-type ~ " + req.http.X-Content-Type
          );
        }

        error 200 "Ban added";
    }

    if (req.request == "PURGE") {
        if (!client.ip ~ purgers) {
             error 405 "Purge not allowed";
        }
        return(lookup);
     }

    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
            # No point in compressing these
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unknown algorithm
            remove req.http.Accept-Encoding;
        }
    }

    if (req.http.User-Agent ~ "(?i)android") {
        set req.http.X-UA-Device = "android";
    }

    {% for item in backend_conf %}
        {% if item.admin is defined and item.admin is sameas true %}
            {% if loop.first -%}
                if 
            {%- else -%}
                elseif 
            {%- endif -%}
             (req.http.host ~ "({{ item.host }})") {

                return (pass);
            }
        {% endif %}
    {% endfor %}

    if (req.request == "POST") {
        return(pass);
    }

    if (req.url ~ "^/preview") {
        return (pass);
    }

    set req.http.Surrogate-Capability = "varnish=ESI/1.0";

    unset req.http.cookie;

    return(lookup);
}

sub vcl_fetch {
    # Set ban-lurker friendly custom headers
    set beresp.http.X-Url = req.url;
    set beresp.http.X-Host = req.http.host;

    if (beresp.status == 404 || beresp.status == 500 || beresp.status == 503) {
        set beresp.ttl = 30s;
    }

    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }

    if (beresp.ttl > 0s) {
      unset beresp.http.Set-Cookie;
      return(deliver);
    }

    if (beresp.ttl > 0s) {
      unset beresp.http.Set-Cookie;
    }
}

sub vcl_deliver {
    # Keep ban-lurker headers only if debugging is enabled
    if (!resp.http.X-Cache-Debug) {
        # Remove ban-lurker friendly custom headers when delivering to client
        unset resp.http.X-Url;
        unset resp.http.X-Host;
        unset resp.http.X-Cache-Tags;
    }
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge;
        error 204 "Purged";
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        purge;
        error 204 "Purged (Not in cache)";
    }
}

sub vcl_hash {
    if (req.http.X-UA-Device) {
        hash_data(req.http.X-UA-Device);
    }
}
